#!/usr/bin/liquidsoap

# ----- Liquidsoap 2.3.x config for Raido AI Pirate Radio -----
# Decoder prefs
settings.decoder.priorities.ffmpeg := 10
settings.decoder.priorities.mad    := 1

# Core / logging
settings.init.allow_root := true
settings.log.level       := 4  # warn

# Telnet control (used by enqueue scripts to push TTS intros)
settings.server.telnet := true
settings.server.telnet.bind_addr := "0.0.0.0"
settings.server.telnet.port := 1234

# ---------- Sources ----------
# Queue for DJ/TTS lines - this will play intros with timeout
tts_q = request.queue(id="tts", timeout=30.0, interactive=true)

# Fallback playlist for when no music available
backup_music = playlist(
  mode="random",
  reload=300,
  reload_mode="watch",
  "/music"
)

# Station playlists generated by the API
main_playlist = playlist(
  mode="random",
  reload=30,
  reload_mode="watch",
  "/shared/stations/main.m3u"
)

christmas_playlist = playlist(
  mode="random",
  reload=30,
  reload_mode="watch",
  "/shared/stations/christmas.m3u"
)

# Combine playlists with the full library as fallback
main_music_source = fallback(track_sensitive=true, [main_playlist, backup_music])
christmas_music_source = fallback(track_sensitive=true, [christmas_playlist, main_music_source, backup_music])

# Helpers
def meta_get(m, k, d)
  if list.mem(k, list.map(fst, m)) then list.assoc(k, m) else d end
end

def rm_key(m, k)  list.filter(fun (kv) -> fst(kv) != k, m) end
def put_default(m, k, v)
  has = list.mem(k, list.map(fst, m))
  cur = if has then list.assoc(k, m) else "" end
  if (not has) or cur == "" then
    m2 = rm_key(m, k)
    list.append(m2, [(k, v)])
  else m end
end

def update_metadata(m)
  m = put_default(m, "title",  "Unknown")
  m = put_default(m, "artist", "Unknown Artist")
  m
end

def json_escape(s)
  step = string.replace(s, "\\", "\\\\")
  string.replace(step, "\"", "\\\"")
end

def make_track_change_handler(station_slug)
  last_processed = ref("")
  def handler(m)
    artist = meta_get(m, "artist", "Unknown artist")
    title  = meta_get(m, "title",  "Unknown title")
    album  = meta_get(m, "album",  "")

    track_key = artist ^ "|" ^ title ^ "|" ^ station_slug
    if last_processed() != track_key then
      last_processed := track_key

      log("🎵 [" ^ station_slug ^ "] Now playing: " ^ title ^ " by " ^ artist)

      payload = '{"artist":"' ^ json_escape(artist) ^ '","title":"' ^ json_escape(title) ^ '","album":"' ^ json_escape(album) ^ '","station_slug":"' ^ station_slug ^ '"}'
      url = "http://api:8000/api/v1/liquidsoap/track_change"

      def make_api_call()
        response = http.post(url, data=payload, headers=[("Content-Type", "application/json")])
        log("✅ [" ^ station_slug ^ "] API call response: " ^ response)
      end

      thread.run(make_api_call)
    end
  end
  handler
end

# ---------- Chain / processing ----------
main_music = metadata.map(update_metadata, main_music_source)
christmas_music = metadata.map(update_metadata, christmas_music_source)

main_music = source.on_metadata(main_music, make_track_change_handler("main"))
christmas_music = source.on_metadata(christmas_music, make_track_change_handler("christmas"))

# Legacy alias for telnet controls
music = main_music

# Sine backup for emergency fallback
sine_src = sine()

# Main radio combines TTS queue with the primary music source
primary = fallback(track_sensitive=true, [tts_q, main_music])
primary = source.on_track(primary, fun (m) -> log("🎤 [main] Track starting: " ^ meta_get(m, "artist", "Unknown") ^ " - " ^ meta_get(m, "title", "Unknown")))
main_radio = fallback(track_sensitive=false, [primary, sine_src])

# Christmas station is music-only with fallback to main rotation
christmas_radio = fallback(track_sensitive=false, [christmas_music, sine_src])

# ---------- Output ----------
output.icecast(
  %mp3(id3v2=true),
  host="icecast",
  port=8000,
  user="source",
  password="hackme",
  mount="/raido.mp3",
  name="🏴‍☠️ Raido - Main Deck",
  url="https://raido.local",
  genre="Pirate Radio",
  description="24/7 AI-powered pirate radio with live DJ commentary",
  main_radio
)

output.icecast(
  %mp3(id3v2=true),
  host="icecast",
  port=8000,
  user="source",
  password="hackme",
  mount="/raido-christmas.mp3",
  name="🎄 Raido - Christmas Waves",
  url="https://raido.local",
  genre="Holiday",
  description="Continuous Christmas and holiday music from the Raido library",
  christmas_radio
)

log("🏴‍☠️ Raido streaming started with main and christmas stations!")
